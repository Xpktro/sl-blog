<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tiaeld Tolsen y el (meta)mundo.]]></title>
  <link href="http://lsl.xpktro.com//atom.xml" rel="self"/>
  <link href="http://lsl.xpktro.com//"/>
  <updated>2013-09-25T15:17:15-05:00</updated>
  <id>http://lsl.xpktro.com//</id>
  <author>
    <name><![CDATA[Tiaeld Tolsen]]></name>
    <email><![CDATA[xpktro@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[¡Haz tu propio AO con llSetAnimationOverride!]]></title>
    <link href="http://lsl.xpktro.com//2013/09/25/llsetanimationoverride/"/>
    <updated>2013-09-25T02:54:00-05:00</updated>
    <id>http://lsl.xpktro.com//2013/09/25/llsetanimationoverride</id>
    <content type="html"><![CDATA[<p>De parte de nuestro colaborador <em>Robe Jameson</em>, tenemos un pequeño artículo acerca del uso de la función <code>llSetAnimationOverride</code>.</p>

<!-- more -->


<p>Utilizaremos la función <a href="http://wiki.secondlife.com/wiki/LlSetAnimationOverride"><code>llSetAnimationOverride</code></a> para fabricarnos un AO de forma fácil.</p>

<ol>
<li>Pon el siguiente script y tus animaciones dentro de un prim.</li>
<li>Edita los nombres de las animaciones del script y cámbialos a los nombres de tus animaciones.</li>
<li>Vístete el prim.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='lsl'><span class='line'><span class="c-Singleline">// Override the Sit, Stand and Walk animations</span>
</span><span class='line'><span class="c-Singleline">// 1. place this script and your animations in a prim</span>
</span><span class='line'><span class="c-Singleline">// 2. edit the animation names in the script to your animation&#39;s names</span>
</span><span class='line'><span class="c-Singleline">// 3. attach the prim to your avatar</span>
</span><span class='line'>
</span><span class='line'><span class="ni">string</span><span class="x"> </span><span class="n">gMySit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;chop_sit&quot;</span><span class="p">;</span>
</span><span class='line'><span class="ni">string</span><span class="x"> </span><span class="n">gMyStand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;FStand _02&quot;</span><span class="p">;</span>
</span><span class='line'><span class="ni">string</span><span class="x"> </span><span class="n">gMyWalk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;Kort gang F v4.1&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">default</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="go">attach</span><span class="p">(</span><span class="ni">key</span><span class="x"> </span><span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="w">    </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="nb">llRequestPermissions</span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">PERMISSION_OVERRIDE_ANIMATIONS</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="nb">llGetPermissions</span><span class="p">()</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">PERMISSION_OVERRIDE_ANIMATIONS</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="n">llResetAnimationOverride</span><span class="p">(</span><span class="s">&quot;ALL&quot;</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="go">run_time_permissions</span><span class="p">(</span><span class="ni">integer</span><span class="x"> </span><span class="n">perms</span><span class="p">)</span>
</span><span class='line'><span class="w">    </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">perms</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">PERMISSION_OVERRIDE_ANIMATIONS</span><span class="w"> </span><span class="p">)</span>
</span><span class='line'><span class="w">        </span><span class="p">{</span>
</span><span class='line'><span class="w">            </span><span class="n">llSetAnimationOverride</span><span class="p">(</span><span class="w"> </span><span class="s">&quot;Sitting&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">gMySit</span><span class="p">);</span>
</span><span class='line'><span class="w">            </span><span class="n">llSetAnimationOverride</span><span class="p">(</span><span class="w"> </span><span class="s">&quot;Standing&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">gMyStand</span><span class="p">);</span>
</span><span class='line'><span class="w">            </span><span class="n">llSetAnimationOverride</span><span class="p">(</span><span class="w"> </span><span class="s">&quot;Walking&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">gMyWalk</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Instrucciones</h3>

<p>Expliquemos como extender este script con un ejemplo. En el código se muestra esta sentencia:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lsl'><span class='line'><span class="n">llSetAnimationOverride</span><span class="p">(</span><span class="s">&quot;Sitting&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">gMySit</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quiere decir que cuando el avatar esté <code>"Sitting"</code> (Sentado), la animación que se reproduce es <code>gMySit</code> definida previamente en la línea 5:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lsl'><span class='line'><span class="ni">string</span><span class="x"> </span><span class="n">gMySit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;chop_sit&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Donde <code>gMySit</code> toma el valor <code>"chop_sit"</code>.</p>

<p>No es necesario definir una <em>variable global</em> como en el script del ejemplo. Podemos omitir las líneas 5, 6 y 7 e introducir el nombre de la animación directamente como se mostrará en los ejemplos a continuación descritos.</p>

<p>Ahora explicaremos cómo ejecutar el resto de animaciones al igual que hacen otros AOs comerciales.</p>

<table>
<thead>
<tr>
<th></th>
<th> Valor                 </th>
<th> Descripción                                                                    </th>
<th> Ejemplo                                                                     </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <code>"Crouching"</code>         </td>
<td> Mientras el avatar se agacha                                                   </td>
<td> <code>llSetAnimationOverride("Crouching", "animacion_agachado");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"CrouchWalking"</code>     </td>
<td> Agachado y caminando                                                           </td>
<td> <code>llSetAnimationOverride("CrouchWalking", "animacion_agachado_caminando");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Falling Down"</code>      </td>
<td> Cayendo                                                                        </td>
<td> <code>llSetAnimationOverride("Falling Down", "animacion_agachado_caminando");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Flying"</code>            </td>
<td> Volando                                                                        </td>
<td> <code>llSetAnimationOverride("Flying", "animacion_volando");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"FlyingSlow"</code>        </td>
<td> Volando despacio                                                               </td>
<td> <code>llSetAnimationOverride("FlyingSlow", "animacion_volando_despacio");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Hovering"</code>          </td>
<td> Flotando                                                                       </td>
<td> <code>llSetAnimationOverride("Hovering", "animacion_flotando");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Hovering Down"</code>     </td>
<td> Flotando hacia abajo                                                           </td>
<td> <code>llSetAnimationOverride("Hovering Down", "animacion_flotando_abajo");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Hovering Up"</code>       </td>
<td> Flotando hacia arriba                                                          </td>
<td> <code>llSetAnimationOverride("Hovering Up", "animacion_flotando_arriba");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Jumping"</code>           </td>
<td> Mientras estas en el aire durante un salto                                     </td>
<td> <code>llSetAnimationOverride("Jumping", "animacion_saltando");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Landing"</code>           </td>
<td> Aterrizando despues de un salto                                                </td>
<td> <code>llSetAnimationOverride("Landing", "animacion_aterrizando");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"PreJumping"</code>        </td>
<td> En el inicio de un salto                                                       </td>
<td> <code>llSetAnimationOverride("PreJumping", "animacion_pre-salto");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Running"</code>           </td>
<td> Corriendo                                                                      </td>
<td> <code>llSetAnimationOverride("Running", "animacion_corriendo");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Sitting"</code>           </td>
<td> Sentandose en un objeto                                                        </td>
<td> <code>llSetAnimationOverride("Sitting", "animacion_sentado");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Sitting on Ground"</code> </td>
<td> Sentandose en el suelo                                                         </td>
<td> <code>llSetAnimationOverride("Sitting on Ground", "animacion_sentado_suelo");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Standing"</code>          </td>
<td> De pie parado                                                                  </td>
<td> <code>llSetAnimationOverride("Standing", "animacion_de_pie");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Standing Up"</code>       </td>
<td> Despues de caer a lo largo de una gran distancia                               </td>
<td> <code>llSetAnimationOverride("Standing Up", "animacion_levantandose");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Striding"</code>          </td>
<td> Cuando el avatar está atascado en el filo de un objeto ó encima de otro avatar </td>
<td> <code>llSetAnimationOverride("Striding", "animacion_equilibrandose");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Soft Landing"</code>      </td>
<td> Despues de caer una pequeña distáncia                                          </td>
<td> <code>llSetAnimationOverride("Soft Landing", "animacion_caida");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Taking Off"</code>        </td>
<td> Despegando                                                                     </td>
<td> <code>llSetAnimationOverride("Taking Off", "animacion_despegando");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Turning Left"</code>      </td>
<td> Girando a la izquierda                                                         </td>
<td> <code>llSetAnimationOverride("Turning Left", "animacion_girando_izquierda");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Turning Right"</code>     </td>
<td> Girando a la derecha                                                           </td>
<td> <code>llSetAnimationOverride("Turning Right", "animacion_girando_derecha");</code></td>
</tr>
<tr>
<td></td>
<td> <code>"Walking"</code>           </td>
<td> Caminando                                                                      </td>
<td> <code>llSetAnimationOverride("Walking", "animacion_caminando");</code></td>
</tr>
</tbody>
</table>


<p><strong>Nota Aclaratoria:</strong> El primer parámetro de la función <code>llSetAnimationOverride</code> <strong>es un valor (circunstancia) de la tabla anterior.</strong> El segundo parámetro es <strong>el nombre de la animación</strong> a ejecutar cuando dicha circunstancia se produzca.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lección 2: Tipos de Datos, Variables y Constantes]]></title>
    <link href="http://lsl.xpktro.com//2013/09/10/datos-y-variables/"/>
    <updated>2013-09-10T21:59:00-05:00</updated>
    <id>http://lsl.xpktro.com//2013/09/10/datos-y-variables</id>
    <content type="html"><![CDATA[<p>Esta lección será eminentemente teórica y algo alargada, revisaremos con cierto nivel de detalles a los distintos tipos de datos con los que nos podemos encontrar durante nuestra vida como <em>scripters</em>. A partir de la siguiente clase volveremos a casos y aplicaciones más <em>prácticas</em> del lenguaje de <em>scripting</em>.</p>

<!-- more -->


<p>Como dijimos antes, en su nivel más puro y técnico, el <em>scripting</em> consiste en el manejo de información. Esta manipulación de datos tarde o temprano resultará en la alimentación de determinadas funciones, que supondrán alguna u otra reacción, complementando la <em>fórmula</em> del <em>scripting:</em> <strong>instrucciones que hace que un objeto reaccione</strong>.</p>

<p>Por ejemplo, la ejecución de <code>llSay(0, "¡Hola Avatar!");</code> ha requerido de los datos <code>0</code> y <code>"¡Hola Avatar!"</code>, y si bien esto es suficiente para el caso presentado, algunas otras funciones, junto con algunas de las ideas que puede estar teniendo listas para escribir necesiten de más tipos de información con los cuales <em>jugar</em> para poder realizar nuestros <em>scripts</em>.</p>

<h3>Los Números Enteros (<code>integer</code>)</h3>

<p><span class='pullquote-right' data-pullquote='los números enteros pueden ir desde −2,147,483,648 hasta 2,147,483,647'>
Uno de los tipos de datos más básicos es el número entero. Al igual que en en el mundo <em>no-scripter</em>, los números enteros se escriben de una sola manera: <strong>usando números <em>(y el signo de negatividad cuando sea necesario)</em></strong>. Sin embargo, aunque grande, existe un límite entre el tamaño de los números que puedes escribir. Esto es, que los números enteros pueden ir desde <code>−2,147,483,648</code> hasta <code>2,147,483,647</code>. Si bien a estas alturas del curso este último dato no es casi relevante, le resultará curioso algún que otro lector.
</span></p>

<h3>Los Números Decimales (<code>float</code>)</h3>

<p>La primera pregunta inmediata tras haber leido el párrafo anterior será sobre la posible existencia de los números decimales/fraccionarios/racionales, y la respuesta es que sí, también se consideran como tipo dato válido al número decimal. Además de su escritura convencional, hay una forma alternativas bastante usual: La abreviación del cero en la parte decimal o entera. O sea, es válido escribir número como <code>.25</code> y <code>1.</code> que equivalen a  <code>0.25</code> y <code>1.0</code> respectivamente. La precisión de los números es (en términos prácticos, lector interesado) de 6 lugares decimales.</p>

<h3>Las Cadenas (<code>string</code>)</h3>

<p><span class='pullquote-right' data-pullquote='Una cadena se escribe siempre rodeada de comillas dobles &#8221; y puede contener caracteres especiales.'>
También vimos, en la clase, anterior, alguna luz sobre los <em>textos</em> como tipo de dato. Y efectivamente, no hay mucha ciencia en la representación de las cadenas de caracteres (este es, de ahora en adelante, el nombre con el cual nos referiremos a ellos). Una cadena se escribe siempre rodeada de comillas dobles <code>"</code> y puede contener caracteres <em>especiales</em>. Existe un par de caracteres que deben de escribirse de cierta forma para ser mostrados correctamente. Estos caracteres son: <code>"</code> y <code>\</code>. La forma de escribirlos es anteponer un slash invertido <code>\</code> al caracteres, con lo que resultarían siendo <code>\"</code> y <code>\\</code> respectivamente. Las cadenas pueden contener <em>saltos de línea</em> y tabulaciones, los cuales se representan con <code>\n</code> y <code>\t</code> respectivamente. Para finalizar, el límite de caracteres que puede contener una cadena está limitado por la cantidad de memoria que tenga un script (este concepto es todavía extraño a los recién iniciados, así que no es obligatoria su comprensión por el momento).
</span></p>

<h3>Los Vectores (<code>vector</code>)</h3>

<p><span class='pullquote-right' data-pullquote='Un vector está denotado por los tres valores decimales separados por comas y rodeados de paréntesis quebrados &lt;&gt;.'>
Esta palabra le sonará dulce a algún lector aficionado por las matemáticas, o le traerá malos recuerdos a los demás. Afortunadamente para todos, en su expresión más simple (que es la que nos interesa), vemos a un vector como la agrupación de tres números decimales, y el uso que le daremos a estos vectores dependerá del contexto en el cual nos encontremos. Iremos descubriendo estos contextos a lo largo del curso. Un vector está denotado por los tres valores decimales separados por comas y rodeados de paréntesis quebrados &lt;&gt;. Por ejemplo: <code>&lt;1.0, 1.0, 1.0&gt;</code> y <code>&lt;0., 13., .1&gt;</code> son dos representaciones válidas de vectores.
</span></p>

<h3>Las Rotaciones (<code>rotation</code>)</h3>

<p><span class='pullquote-right' data-pullquote='las rotaciones se escriben casi igual a los vectores, con la única diferencia que no son tres, sino cuatro los valores decimales a agrupar'>
De manera similar a los vectores, las rotaciones tienen un trasfondo matemático que, seamos sinceros, es bastante desagradable. Pero estimado lector, no deberá usted sufrir de ningún disgusto a lo largo del curso, ya que lo único que usted debe de saber de las rotaciones es que se utilizan para representar la forma en la cual un objeto se encuentra rotado respecto a un punto referencial. De forma práctica, <strong>nunca</strong> manipularemos manualmente ni directamente los valores de una rotación, por lo cual estaremos libres de intentar entender los principios matemáticos que las rigen. Aún así, debemos de saber que las rotaciones se escriben casi igual a los vectores, con la única diferencia que no son tres, sino cuatro los valores decimales a agrupar.
</span></p>

<h3>Los Keys (<code>key</code>)</h3>

<p><span class='pullquote-right' data-pullquote='Un key es un identificador único para cada objeto y cada avatar que existe en el mundo.'>
Muchas de las funciones que estudiaremos, o más concretamente, muchas de las más <em>útiles</em>, tendrán que ver con el manejo de avatares y objetos dentro del mundo. De esta manera, para su funcionamiento, se requerirá indicarle a estas funciones exactamente con qué o con quién <em>actuar</em>, y la única forma de hacerlo será a través de los keys. Un key es un identificador único para cada objeto y cada avatar que existe en el mundo. Este identificador está formado por una serie de 36 dígitos del sistema de numeración hexadecimal (o sea, 0 &ndash; F) y están separados por una serie de guiones simples. Por ejemplo <code>"a822ff2b-ff02-461d-b45d-dcd10a2de0c2"</code> es un key válido. En términos estrictamente prácticos, no hay diferencia alguna entre una cadena común y corriente y un key, salvo que este último, aparte de ser necesario por algunas funciones como dijimos al inicio, se encarga de <em>verificar</em> que hayamos introducido un valor correcto (en caso creemos keys manualmente).
</span></p>

<p>Existe un tipo de dato más adicional muy interesante que es la Lista (<code>list</code>), pero por su naturaleza algo más compleja, tendremos que revisarla en una clase posterior.</p>

<h2>Variables y Constantes</h2>

<p>Nos detuvimos un buen tiempo para revisar algunos asuntos teóricos en cuanto al lenguaje se refiere, pero es hora de ver algo un poco más concreto: aprenderemos qué son las variables (y de paso las constantes).</p>

<h3>Variables</h3>

<p>Si el lector recuerda alguna de sus clases de matemáticas en la escuela o similares, recordará haber escuchado el término <strong>variable</strong> en algún momento. Análogamente al concepto <em>matemático</em> de una variable, en términos de <em>scripting</em>, una variable es <em>algo</em> que es bastante propenso a cambiar, pero que recibe un nombre para referirnos a ello en cualquier momento, independientemente de si ha cambiado o no.</p>

<p>Por ejemplo, si visitó algún centro comercial con sus amigos y cada uno de ustedes recibió un mensaje de bienvenida automático, pero personalizado conteniendo cada uno de sus nombres, podremos decir que el mensaje en cuestión es constante, pero que algunas partes de él como el nombre que se muestra es parte de una variable. Podemos ver también algo de esto en las jarras de propinas, que tienen un contador <em>variable</em> del dinero que ha sido donado hasta el momento y el nombre de la persona que hizo la última donación.</p>

<p>Podemos también pensar en las variables como parte del <em>cerebro</em> del script, siendo aquellos lugares en donde podemos almacenar información de forma permanente hasta que algo o alguien decida cambiar sus contenidos.</p>

<p>En efectos prácticos, podemos definir una variable utilizando la siguiente sintaxis:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tipo nombre[ = valor];</span></code></pre></td></tr></table></div></figure>


<p>Todo aquello encerrado entre corchetes es de escritura opcional. Esto quiere decir, refiriéndonos al caso de las variables, que podemos crearlas y asignarles un valor de manera inmediata, esto es particularmente útil para cuando necesitemos definir algunos valores que se repetirán mucho a lo largo del <em>script</em> o que queremos que los usuarios del <em>script</em> puedan <em>configurar</em> estos parámetros a su gusto sin tener que alterar nada más que esas líneas iniciales. Volviendo al <code>tipo</code>: toda variable debe de especificarse con el tipo de dato que esta contendrá, si tratamos con una cadena, el tipo será <code>string</code>, o si es un número entero <code>integer</code>, para los demás tipos de datos, sus nombres están escritos entre paréntesis en cada título de esta lección.</p>

<p>Veamos un ejemplo práctico del uso de las variables en nuestro primer script, el Hola Avatar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='lsl'><span class='line'><span class="ni">string</span><span class="x"> </span><span class="n">nombre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;Tiaeld Tolsen&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">default</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="go">state_entry</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="nb">llSay</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;¡Hola, &quot;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">nombre</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&quot;!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="go">touch_start</span><span class="p">(</span><span class="ni">integer</span><span class="x"> </span><span class="n">total_number</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="nb">llSay</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Tocaste el prim de &quot;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">nombre</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notarán cómo utilizo el operador de suma <code>+</code> para <em>unir</em> una cadena a una variable. Este procedimiento, cuando se trata de dos o más cadenas, recibe el nombre de <em>concatenación</em>. Así que cada vez que querramos coser un <code>string</code> con otro, simplemente utilizamos <code>+</code>. Noten también que esta <em>concatenación</em> se hace <em>tal cual</em>, por lo que habrán que agregar los espacios que hagan falta para producir una oración correctamente escrita si se desea.</p>

<p>También podemos hacer operaciones utilizando variables, por ejemplo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='lsl'><span class='line'><span class="ni">string</span><span class="x"> </span><span class="n">nombre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;Tiaeld&quot;</span><span class="p">;</span>
</span><span class='line'><span class="ni">string</span><span class="x"> </span><span class="n">apellido</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;Tolsen&quot;</span><span class="p">;</span>
</span><span class='line'><span class="ni">integer</span><span class="x"> </span><span class="n">veces</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">default</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="go">state_entry</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="ni">string</span><span class="x"> </span><span class="n">nombre_completo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nombre</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&quot; &quot;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">apellido</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="nb">llSay</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Este es el prim de &quot;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">nombre_completo</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="go">touch_start</span><span class="p">(</span><span class="ni">integer</span><span class="x"> </span><span class="n">total_number</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="n">veces</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">veces</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="nb">llSay</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Tocaste este prim &quot;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">veces</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&quot; veces.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Introduje un par de nuevas cosas de manera sutil en este script que imagino se habrán dado cuenta:</p>

<ul>
<li>Se pueden crear variables tant <em>fuera</em> de los estados como <em>dentro</em> de los eventos. El único lugar en donde no podemos crear variables es dentro de un estado (no de un evento, si no sólamente dentro de un estado).</li>
<li>Una vez que una variable es definida, podemos cambiar su valor llamándola sólamente por su nombre las veces siguientes, como es el caso de <code>veces</code>.</li>
<li>Podemos utilizar valor <em>anterior</em> de la variable para volver a definirla (en el caso de <code>veces</code>). No habrá ningún problema con esto ya que <strong>las operaciones se ejecutan antes</strong> de asignar valores a variables.</li>
<li>Ya que nuestra variable <code>veces</code> es del tipo <code>integer</code>, y por lo visto anteriormente, <code>llSay</code> acepta sólamente datos del tipo <code>string</code>, se tiene que realizar una <strong><em>conversión</em></strong>, convertir un dato de un tipo a otro es tan sencillo como <strong>encerrar entre paréntesis el tipo de dato al que queremos transformar nuestro valor actual</strong>. En este caso, transformamos a <code>veces</code> de <code>integer</code> a <code>string</code>.</li>
</ul>


<p>El lector podrá preguntarse si, en el ejemplo anterior, <code>nombre_completo</code> podrá ser utilizado en veces posteriores (como por ejemplo, en <code>touch_start</code>), la respuesta es <strong>no</strong>, <strong>una variable definida dentro de un bloque de código (como un evento) no será <em>visible</em> fuera de este</strong>. Si intenta referirse a <code>nombre_completo</code> desde <code>touch_start</code> obtendrá una alerta del editor de <em>scripts</em> que le impedirá continuar.</p>

<p>De esta misma forma, las variables que se definan antes de los estados, podrán utilizarse a lo largo de todo el script, y normalmente se las llama <strong><em>variables globales</em></strong> por este motivo.</p>

<p>¿Y si <code>veces</code> jamás obtuvo un valor al ser definida, cómo puede funcionar nuestro <em>script</em>? Sucede que todas las variables, al no definirlas con un valor específico, son <em>creadas</em> con un valor por defecto. Concretamente, los valores por defecto de todos los tipos de datos se encuentran en la siguiente tabla:</p>

<table>
<thead>
<tr>
<th></th>
<th> Tipo       </th>
<th> Valor              </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <code>integer</code>  </td>
<td> <code>0</code></td>
</tr>
<tr>
<td></td>
<td> <code>float</code>    </td>
<td> <code>0.</code></td>
</tr>
<tr>
<td></td>
<td> <code>string</code>   </td>
<td> <code>""</code></td>
</tr>
<tr>
<td></td>
<td> <code>vector</code>   </td>
<td> <code>&lt;0., 0., 0.&gt;</code></td>
</tr>
<tr>
<td></td>
<td> <code>rotation</code> </td>
<td> <code>&lt;0., 0., 0., 1.&gt;</code></td>
</tr>
<tr>
<td></td>
<td> <code>key</code>      </td>
<td> <code>""</code></td>
</tr>
<tr>
<td></td>
<td> <code>list</code>     </td>
<td> <code>[]</code></td>
</tr>
</tbody>
</table>


<p>Y para finalizar nuestra lección, veremos un último ejemplo mucho más completo, y con más cosas nuevas que serán explicadas a continuación:</p>

<figure class='code'><figcaption><span>Ejemplo Completo de Variables/Constantes (variables_constantes.lsl)</span> <a href='http://lsl.xpktro.com//downloads/code/variables_constantes.lsl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='lsl'><span class='line'><span class="ni">string</span><span class="x"> </span><span class="n">mensaje</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;Hola, soy el prim con key&quot;</span><span class="p">;</span>
</span><span class='line'><span class="ni">float</span><span class="x"> </span><span class="n">segundos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">1.5</span><span class="p">;</span>
</span><span class='line'><span class="ni">vector</span><span class="x"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;</span><span class="mf">0.</span><span class="p">,</span><span class="w"> </span><span class="mf">0.</span><span class="p">,</span><span class="w"> </span><span class="mf">1.</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="ni">rotation</span><span class="x"> </span><span class="n">cero</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ZERO_ROTATION</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">default</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="go">state_entry</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="ni">key</span><span class="x"> </span><span class="n">prim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">llGetKey</span><span class="p">();</span>
</span><span class='line'><span class="w">        </span><span class="nb">llSay</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">mensaje</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&quot; &quot;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">string</span><span class="p">)</span><span class="n">prim</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="go">touch_start</span><span class="p">(</span><span class="ni">integer</span><span class="x"> </span><span class="n">num_detected</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="nb">llSetColor</span><span class="p">(</span><span class="n">color</span><span class="p">,</span><span class="w"> </span><span class="no">ALL_SIDES</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="nb">llSleep</span><span class="p">(</span><span class="n">segundos</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="nb">llSetRot</span><span class="p">(</span><span class="n">cero</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>¿Podemos asignar una función a una variable?</em> En realidad estamos asignando el <strong>resultado</strong> de la función a la variable. <strong>Algunas funciones producen un dato tras ser <em>invocadas.</em></strong> En este caso <code>llGetKey()</code> produce el key del prim donde se encuentra el script actualmente.</li>
<li><code>llSetColor</code> es una función nueva para nosotros, y como su nombre lo indica, cambia el color del cual está pintado el prim que contiene el script. Sin embargo, se requieren dos datos para su correcta ejecución: el color y la cara a pintar. Vemos que alimentamos a <code>llSetColor</code> con nuestra variable de tipo <code>vector</code>, esto es debido a que el color en términos de <em>scripting</em> se representa siempre de esta forma, siendo <strong>cada uno de los números decimales correspondiente a la cantidad de color Rojo, Verde y Azul del color a representar, variando desde 0.0 a 1.0</strong>, el lector tiene como ejercicio variar estos valores a gusto para obtener colores distintos. Para finalizar, el otro dato necesario es un número entero que puede variar desde <code>0</code> hasta el número de caras que tenga el prim, o la <em>constante</em> <code>ALL_SIDES</code>, que explicaremos a continuación.</li>
<li>Las <em>variables</em> (a primera vista) <code>ZERO_ROTATION</code> y <code>ALL_SIDES</code> son lo que llamamos <strong>constantes</strong>. <strong>Una constante es, sencillamente, una variable cuya valor jamás cambiará</strong>, el lenguaje de <em>scripting</em> tiene una extensa lista de constantes de distintos tipos que tienen diversas utilidades. Concretamente, <code>ZERO_ROTATION</code> representa una rotación <em>nula</em>, y <code>ALL_SIDES</code> se usa junto con <code>llSetColor</code> para indicar que se habrán de <em>pintar</em> todas las caras del prim.</li>
<li><code>llSleep</code> tiene como propósito <em>pausar</em> al script por cierta cantidad de tiempo, que justamente es el único dato que necesita para funcionar y que necesariamente tiene que ser de tipo <code>float</code>. Notarán que una vez se ha hecho click al <em>prim</em>, habrá una pausa de un segundo y medio antes de ejecutar la siguiente acción.</li>
<li><code>llSetRot</code> cambia la rotación del prim respecto al mundo. Si no rotamos al prim que contiene este script manualmente, no se observará el efecto, de otra forma, le veremos regresar a su posición <em>inicial</em>. Como se observa, sólo necesita como dato la rotación a aplicarse sobre el prim.</li>
</ul>


<p>Y esta sería toda la lección. No se olviden de formular sin tapujo alguno todo tipo de aclaración, sugerencia, duda, corrección o comentario que crean conveniente. Haremos cosas mucho menos pesadas y más divertidas de ahora en adelante.</p>

<h3>Recursos adicionales:</h3>

<ul>
<li><a href="http://lslwiki.net/lslwiki/wakka.php?wakka=color"><strong>Listado de colores en formato LSL</strong></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lección 1: Hola Avatar, Disecado]]></title>
    <link href="http://lsl.xpktro.com//2013/09/06/dentro-del-hola-avatar/"/>
    <updated>2013-09-06T15:59:00-05:00</updated>
    <id>http://lsl.xpktro.com//2013/09/06/dentro-del-hola-avatar</id>
    <content type="html"><![CDATA[<p>En esta primera lección formal, disecaremos a detalle el más sencillo e interesante de los <em>scripts</em>: el <strong>Hola Avatar</strong>. <a href="http://lsl.xpktro.com//2013/09/06/hola-avatar">Si no ha leido la lección anterior, es un buen momento para hacerlo,</a> ya que me referiré a algunas cosas ahí mencionadas.</p>

<!-- more -->


<p>Qué mejor forma de empezar en el mundo del scripting que produciendo nuestro propio primer script, y para este primer caso ¡no es necesario hacer casi nada!. Asegúrese de encontrarse en un terreno en donde pueda construir y que tenga un tiempo de retorno de <em>prims</em> relativamente alto (pasaremos un tiempo mirando nuestro script).</p>

<h3>Nuestro primer script: creación</h3>

<p>Presione el botón de construcción en la parte inferior de su visor (o donde habitualmente sabe que se encuentra).</p>

<p><img class="center" src="http://lsl.xpktro.com//images/build.png"></p>

<p>Haga click en cualquier lugar cercano a su ubicación y vea cómo un hermoso cubo de madera, junto con la <em>herramienta de construcción</em> se materializan en su pantalla. El acto de <em>producir objetos</em> en el <em>mundo</em> se conoce comúnmente como <strong>rezear</strong> (la etimología puede verse en el glosario).</p>

<p><img class="center" src="http://lsl.xpktro.com//images/rez.png"></p>

<p>Diríjase a la pestaña de <strong>contenidos</strong> en la <em>herramienta de construcción</em>. Un <em>prim</em> puede contener varios <em>objetos</em>, para ello cuenta con un <em>inventario</em>, el cual estamos observando en este momento. Obsérvese la presencia de algunos botones relacionados con el manejo de scripts, utilizaremos estos botones a menudo.</p>

<p>Presione el botón de <strong>Nuevo Script</strong> y observe cómo éste aparece en el <em>inventario</em> del objeto que estamos editando. Inmediatamente después, un curioso mensaje asoma por la ventana del chat general.</p>

<p><img class="center" src="http://lsl.xpktro.com//images/primcontents.png"></p>

<p>¡Lo hemos logrado! la creación de nuestro primer <em>script</em> <em>casi-sin-esfuerzo</em> ha sido satisfactoria. Veamos con más detalle la maravilla que acabamos de crear, haciendo doble click al <strong>Script Nuevo</strong> dentro del inventario del <em>prim</em>.</p>

<p><img class="center" src="http://lsl.xpktro.com//images/scripteditor.png"></p>

<p>La ventana que se nos muestra es el <strong>editor de scripts</strong>, dentro de ella escribiremos/editaremos nuestro código, y ordenaremos la ejecución o detención del script que estemos observando. Adicionalmente el editor nos permite reconocer los distintos elementos que conforman un script resaltándolos con distintos colores; a esto se le suele llamar <strong>resaltado de sintaxis</strong>.</p>

<h3>Nuestro primer script: disección</h3>

<p>Empecemos por lo que nos resulta más evidente: el &ldquo;Hello, Avatar!&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lsl'><span class='line'><span class="nb">llSay</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Hello, Avatar!&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Todas las instrucciones que un objeto vaya a ejecutar han de terminar con un punto y coma (;), en este caso, se deduce que al objeto se le ha ordenado algo que resultó en escribir &ldquo;Hello, Avatar!&rdquo; por el chat general.</p>

<p>El lenguaje de <em>scripting</em> trae un gigantesco volumen de acciones que puede realizar nuestro objeto. A estas acciones se les conoce con el nombre de <strong>funciones</strong>, y todas están nombradas empezando con dos letras &lsquo;l&rsquo; minúsculas (ll por Linden Lab :)), seguidas de una corta y contundente descripción de su uso. En este caso, podemos ver que se utiliza función <code>llSay</code>. Utilizar una función significa llamarla por su nombre, y escribir entre paréntesis una serie de datos que necesita para <em>funcionar</em>, separados por comas.</p>

<p>En un nivel más atómico, el <em>scripting</em> implica manejar datos, como por ejemplo un texto: <code>"Hello, Avatar!"</code>, o un número: <code>0</code>. Veremos en la siguiente lección los distintos tipos de datos que existen para el lenguaje, pero esa es otra historia. Hasta este punto sabemos que además de haberse ejecutado una instrucción, esta instrucción es la acción llSay, y que la acción recibió los datos <code>0</code> y <code>"Hello, Avatar!"</code>.</p>

<p><code>llSay</code> es la acción que permite que nuestro objeto emita un mensaje a través del chat. En el <em>metaverso</em>, los mensajes pueden viajar a través de una serie de canales numerados, siendo el <code>0</code> el que conocemos como el <em>chat general</em> y extendiéndose hasta un número muy pero muy grande. Todos los canales del chat son públicos, pero como <em>avatares</em> sólo podemos <em>escuchar</em> el canal 0. En una clase posterior volveremos a tocar el tema a fondo, pero la importancia de esto es el significado del primer dato que recibió <code>llSay</code>: es <strong>el canal por el cual emitir el mensaje</strong>. El siguiente dato se explica por sí mismo: es el texto a enviarse, que en este caso es el famosísimo <code>"Hello, Avatar!"</code>. Aquí notaremos otra cosa muy importante: todos los datos que representan <strong>textos</strong> van siempre <strong>encerrados entre comillas dobles</strong>, acordarse siempre de esto, y del detalle de los puntos y comas le evitarán muchos dolores de cabeza.</p>

<p>La forma de uso de las funciones, o sea cuántos, cuáles y en qué orden van los datos, viene definida por los creadores del lenguaje y es inalterable. Faltar o cambiar algo a estas definiciones resultará en comportamientos inesperados o simplemente el script <em>se romperá</em>. No es momento de asustarse todavía por nada de esto, pero vale la advertencia para el futuro.</p>

<p>En resumen, hasta ahora sabemos que <code>llSay(0, "Hello, Avatar!");</code> significa: <em>di <code>"Hello, Avatar!"</code> en el canal <code>0</code></em>, pero regresando a nuestra premisa inicial, ¿Qué evento se produjo para que esto ocurra? para entender el elemento faltante en nuestra ecuación, daremos un paso atrás para aprender acerca de los <strong>estados</strong> y los <strong>eventos</strong>.</p>

<h3>Estados y Eventos</h3>

<p>En términos estrictamente técnicos, <em>LSL es un lenguaje orientado a eventos y estados</em>, y aunque la oración anterior pudo haberle producido algo de recelo, veremos que es algo mucho más sencillo de lo que parece.</p>

<p>Un evento es <strong>algo que ocurre en algún momento</strong>, y, al igual que en la vida real, en el mundo del <em>scripting</em>, su significado es el mismo. Todas las acciones que se ejecuten en un script, habrán ocurrido en razón a un evento. Por ejemplo: la recepción de un pago, el click del mouse de un avatar, la cercanía de un avatar, etc&hellip;</p>

<p>Los eventos en LSL están escritos en letras minúsculas y opcionalmente contienen guiones, análogamente al caso de las funciones, los eventos también tienen una serie de datos asociados a ellos, con la excepción que nosotros no <em>introducimos</em> los datos, sino que los <em>recibimos</em>. Veremos esto en detalle en una lección posterior. Por ejemplo, el evento que define el click del mouse se escribe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lsl'><span class='line'><span class="go">touch_start</span><span class="p">(</span><span class="ni">integer</span><span class="x"> </span><span class="n">total_number</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="n">instrucciones</span><span class="o">...</span>
</span><span class='line'><span class="w">    </span><span class="n">instrucciones</span><span class="o">...</span>
</span><span class='line'><span class="w">    </span><span class="n">instrucciones</span><span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Al igual que las funciones, los <em>datos</em> de los eventos también se escriben entre paréntesis, seguidos de llaves <code>{}</code> que delimitan a las instrucciones que se ejecutarán. Habrá observado que en el script autogenerado la posición de las llave inicial cambió a la siguiente línea. El motivo de esto es puramente estético. De hecho, los <em>scripts</em> podrían escribirse en una sola línea y funcionar exactamente igual, pero el resultado sería muy poco legible y no queremos eso para nada. Adicionalmente la alineación de las instrucciones respecto al estado y a los demás elementos también tiene un motivo estético. Al esta <em>jerarquía</em> de posiciones de las instrucciones se la llama <strong>indentación</strong>. Y para terminar, el significado de <code>integer total_number</code> será visto en una clase posterior. Por ahora asumamos que es así como se debe de definir el evento <code>touch_start</code> siempre.</p>

<p>Es hora de hablar de estados. Un estado en la vida real es <em>una forma de estar</em>, un conjunto de características que definen a algo (un objeto, una persona, etc&hellip;). En términos de <em>scripting</em>, un estado es <strong>un conjunto de eventos</strong>. Los estados sirven para delimitar una serie de respuestas de forma abstracta; si lo miramos con detalle veremos que cobra sentido: podemos hacer que una lámpara se encienda cuando se encuentre en estado <em>apagado</em> (que normalmente sería el estado <em>por defecto</em>), y viceversa, que se apague cuando se encuentre <em>encendida</em>. El manejo de estados nos ayudará mucho a lo largo de nuestra vida como <em>scripters</em>, aunque ese será el objeto de otra lección.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='lsl'><span class='line'><span class="kd">default</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="go">touch_start</span><span class="p">(</span><span class="ni">integer</span><span class="x"> </span><span class="n">total_number</span><span class="p">){</span>
</span><span class='line'><span class="w">        </span><span class="o">...</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="o">...</span>
</span><span class='line'><span class="w">    </span><span class="o">...</span>
</span><span class='line'><span class="w">    </span><span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>En nuestro <em>script</em>, solamente tenemos un estado, el estado <em>por defecto</em> <code>default</code>. Al igual que con los eventos, todos sus contenidos están encerrados entre llaves, pero a diferencia de estos, los eventos no envían ni reciben datos como tales, entonces no necesitan paréntesis algunos. <strong>Todo script debe de tener obligatoriamente el estado <code>default</code>, de lo contrario no funcionará</strong>.</p>

<p>Y tras todo esto, ¿a qué evento corresponde el tal <code>state_entry</code>?, algunos ya habrán sacado sus conclusiones: <code>state_entry</code> es el evento que se produce cada vez que un objeto <em>entra</em> a un estado, y como el estado por defecto en todo script es el <code>default</code>, al ejecutarse por primera vez el script, se entrará al estado <code>default</code>, desencadenando <code>state_entry</code>.</p>

<p>En pocas palabras: ¡&#8221;Hello, Avatar!&ldquo; es lo primero que se verá al ejecutar el script por primera vez!. Lo veremos totalmente claro en esta secuencia de pasos:</p>

<ul>
<li>El script se genera.</li>
<li>El script entra en el estado <code>default</code>.</li>
<li><code>state_entry</code> es disparado al entrar en <code>default</code>.</li>
<li>Se ejecuta <code>llSay(0, "Hello Avatar!");</code></li>
<li>En el canal <code>0</code>, aparece el texto <code>"Hello Avatar!"</code></li>
</ul>


<p>Y así, querido lector, hemos disecado satisfactoriamente el famoso <em>Hola, Avatar!</em> con nuestras propias manos. Como pequeño ejercicio de reforzamiento intente explicar cuál es la secuencia de pasos que hacen que el objeto diga &ldquo;Touched.&rdquo; cuando se le hace click.</p>

<p>Adicionalmente, intente cambiar los mensajes que aparecen en ambos casos. Cuando haya realizado los cambios, presione el botón de guardar (graficado con la imagen de un diskette), y si todo salió bien, verá la palabra &ldquo;Guardado.&rdquo; en el cuadro inferior de la ventana de edición; de lo contrario, un mensaje le advertirá de los problemas que hayan podido ocurrir durante el guardado. Asegúrese también de que la casilla de &ldquo;Ejecutándose&rdquo; se encuentre marcada.</p>

<p><img class="center" src="http://lsl.xpktro.com//images/saved.png"></p>

<p>En la siguiente lección nos adentraremos en el primero de nuestros asuntos pendientes: veremos todos los tipos de datos que tenemos disponibles para poder escribir nuestros <em>scripts</em>.</p>

<p>Como bien saben, cualquier aclaración o sugerencia es bienvenida en el área de comentarios, y agradeciéndole su paciencia y determinación para con el curso me despido por ahora.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lección 0: Hola Avatar]]></title>
    <link href="http://lsl.xpktro.com//2013/09/06/hola-avatar/"/>
    <updated>2013-09-06T01:20:00-05:00</updated>
    <id>http://lsl.xpktro.com//2013/09/06/hola-avatar</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>El infame Hola Avatar (hello_avatar.lsl)</span> <a href='http://lsl.xpktro.com//downloads/code/hello_avatar.lsl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lsl'><span class='line'><span class="kd">default</span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="go">state_entry</span><span class="p">(){</span>
</span><span class='line'><span class="w">        </span><span class="nb">llSay</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;¡Hola Avatar!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Antes de preocuparnos por entender la maravillosa pieza de código que encabeza esta lección, enfoquémonos por un momento en el aspecto <em>filosófico</em> del <em>scripting</em>.</p>

<!-- more -->


<p><span class='pullquote-right' data-pullquote='un script es un conjunto de instrucciones que le dicen a un objeto cómo reaccionar ante determinados eventos'>
En pocas y concretas palabras, un <em>script</em> es <strong>un conjunto de instrucciones que le dicen a un objeto cómo reaccionar ante determinados eventos</strong>. Escriban eso y ténganlo siempre presente; <strong>toda</strong> la lógica de un script se reduce a esa oración, demostraremos que esto es verdad a lo largo del curso, pero pondré un par de ejemplos para aclarar la situación:
</span></p>

<h3>Una Poseball</h3>

<ul>
<li><strong>Evento:</strong> Un avatar se sienta.</li>
<li><strong>Objeto que reacciona:</strong> La bola/silla/cama/etc donde uno se sienta.</li>
<li><strong>Reacción:</strong> Ejecutar una animación sobre el avatar.</li>
</ul>


<div style="text-align: center;"><img src="http://lsl.xpktro.com//images/poseball.png" width="300"><img src="http://lsl.xpktro.com//images/poseball2.png" width="300"></div>


<br>


<h3>Un TipJar (alcancía)</h3>

<ul>
<li><strong>Evento:</strong> Un avatar le entrega dinero al TipJar.</li>
<li><strong>Objeto que reacciona:</strong> El TipJar.</li>
<li><strong>Reacción:</strong> Agradecer al donador/actualizar el contador de cantidades recibidas.</li>
</ul>


<div style="text-align: center;"><img src="http://lsl.xpktro.com//images/tipjar.png" width="400"><img src="http://lsl.xpktro.com//images/tipjar2.png" height="200"></div>


<br>


<h3>Una Puerta</h3>

<ul>
<li><strong>Evento:</strong> Un avatar da un click a la puerta.</li>
<li><strong>Objeto que reacciona:</strong> La Puerta.</li>
<li><strong>Reacción:</strong> La puerta gira para abrirse/cerrarse.</li>
</ul>


<div style="text-align: center;"><img src="http://lsl.xpktro.com//images/door.png" width="300"><img src="http://lsl.xpktro.com//images/door2.png" width="300"></div>


<br>


<p>También existen acciones/reacciones algo más complejas o abstractas, como la colisión entre dos objetos, o la lectura de una notecard, pero no es necesario marearse tanto en este momento. Lo único que debemos de saber y reconocer desde ahora es a ver el mundo desde esta nueva perspectiva: Acción &ndash;> Objeto &ndash;> Reacción.</p>

<p>Ya tenemos vista la <em>filosofía</em> detrás del <em>scripting</em>, pero ¿ahora qué?; ¿cómo es que le decimos a nuestros objetos que hagan tal o cual cosa?, la respuesta es sencilla: a través del <em>scripting</em>. Como actualmente las máquinas/programas son algo tontos y todavía no pueden entender las palabras que utilizamos las personas para comunicarnos, debemos de utilizar un <strong>código</strong> para hacernos entender, y que las máquinas (en este caso, los objetos del mundo) nos entiendan. Este <strong>código</strong> tiene una serie de reglas que definen su estructura. A diferencia de los lenguajes que utilizamos para comunicarnos entre las personas, para con las máquinas <strong>debemos de mantener siempre una misma estructura</strong>, porque, como ya dije anteriormente, (todavía) son algo torpes para entendernos.</p>

<p>El código que utilizaremos para comunicarnos con nuestros objetos se llama <strong>LSL2</strong>, el 2 indica que hubo una <em>versión</em> anterior en algún momento del pasado que ya no es vigente, y que por comodidad nos referiremos (al igual que la gran mayoría de residentes) a él como simplemente <strong>LSL</strong> (siglas de <em>Linden Scripting Language</em>, ¿ahora entiende lo que significa?). Todo el código que escribamos deberá de estar contenido en un <em>script</em>, y este <em>script</em> residirá al <em>interior</em> del objeto que querramos que reaccione. Veremos ejemplos concretos de estos procedimientos en la siguiente lección.</p>

<p>Una de las cosas para lo que las máquinas sí sirven, y muy bien, es poder realizar muchas tareas en simultáneo (o hacerlas tan rápido que pareciera que es así), entonces es posible tener más de un <em>script</em> en un objeto, y que este pueda responder de cuantas formas se haya definido en todos sus scripts en simultáneo.</p>

<p>Sin nada más que agregar, vamos a ponernos manos a la obra con nuestro hasta ahora inentendido <em>Hola Avatar</em> desde un enfoque algo más técnico en la siguiente lección.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducción y Requisitos]]></title>
    <link href="http://lsl.xpktro.com//2013/09/03/introduccion-y-requisitos/"/>
    <updated>2013-09-03T22:48:00-05:00</updated>
    <id>http://lsl.xpktro.com//2013/09/03/introduccion-y-requisitos</id>
    <content type="html"><![CDATA[<p>Que el título no les asuste, en realidad no hay mucho por saber de anticipado antes de poder llevar y concluir el curso de LSL con éxito.</p>

<!-- more -->


<h3>Nota Introductoria</h3>

<p>Sobre el curso en sí hay un par de cositas por decir. Empezamos desde el <em>cero absoluto</em>, asumiendo que el lector no tiene (mucha) idea sobre ningún tema afín a la programación y al scripting. El objetivo es que al final (aunque es probable que mucho antes) del ciclo de entregas del curso, el lector se encuentre en condiciones de buscar su camino por las páginas de la documentación para poder encontrar la satisfacción a todas sus necesidades, si es que alguna de las actuales entregas no lo ha hecho previamente.</p>

<p>Espero que encuentren llevable la cantidad y calidad de la información que será vertida a lo largo de las entregas. Cualquier anotación, petición o consulta puede realizarse a través de la caja de comentarios que estará completamente abierta en todo momento.</p>

<p>En la parte superior de esta página, en la <em><strong>barra de navegación</strong></em> encontrarán acceso al índice general de temas y el glosario de los términos potencialmente poco-familiares que vayamos pudiendo encontrarnos a lo largo del camino.</p>

<h3>Requisitos</h3>

<p>Para el desarrollo del curso se asume que los lectores deben de cumplir una sencillísima serie de requisitos:</p>

<ul>
<li>Tener nociones básicas de construcción. Con poder <em>rezear</em> un <em>prim</em> y poder ver/agregarle contenidos es suficiente. Aunque incluso describiremos los procedimientos mencionados en las primeras clases.</li>
<li>Tener un navegador moderno/actualizado para poder visualizar correctamente algunos elementos de este curso. Incluso el navegador que viene dentro de su visor será suficiente en un inicio.</li>
<li>Tener muchísima curiosidad y ganas de aprender. Nunca es suficiente cuando se trata del <em>scripting</em>.</li>
</ul>


<p>No hay mucho más por agregar para poder empezar, la mayor ventaja de ser <em>scripter</em> es poder producir cosas a partir de prácticamente la imaginación con un poco de esfuerzo de por medio.</p>

<h3>Materiales</h3>

<p>La referencia más completa y más grande del lenguaje de <em>scripting</em> se encuentra en la <a href="http://wiki.secondlife.com/wiki/LSL_Portal/es">Wiki oficial de LSL (este es el portal en español)</a>. Considérese como el lugar definitivo al cual acudir ante una duda o necesidad de información. Adicionalmente hay una versión paralela con algunos consejos adicionales y material de interés llamada <a href="http://lslwiki.net/lslwiki/wakka.php?wakka=HomePage">LSLWiki</a>.</p>

<p>Desafortunadamente, la información sobre <em>scripting</em> en español es casi nula, incluso en los canales anteriormente mencionados. Es otro de los motivos por los cuales existe el presente curso. Sin embargo, tras cierto número de entregas, el lector encontrará mucho más comprensibles las fuentes en inglés y podrá continuar sin ningún problema (e incluso, si así se desea, aportar con el conocimiento traduciendo alguna página oficial al español).</p>

<p>Los materiales multimedia que puedan aparecer a lo largo de las entregas estarán producidos utilizando el visor <a href="http://www.firestormviewer.org/">Firestorm</a>. Hago el adelanto de si se encuentran con algún botón o pantalla algo distinta a la de los visores que suelen utilizan habrá de ser por este motivo. Sin embargo, salvo estricta advertencia (y es muy poco probable que esto ocurra) se utilizarán funciones exclusivas de este visor; aún así, el proceso principal de <em>scripting</em> y construcción no requerirá nada más de lo que se puede hacer en cualquier visor vigente.</p>

<p>Si bien será más que suficiente utilizar el editor de <em>scripts</em> incorporado en su visor para poder llevar a cabo el curso. Puede usarse cualquier otro editor de texto para ejecutar y completar el curso. Una lista extensiva y bastante bien documentada sobre herramientas externas de <em>scripting</em> disponibles <a href="http://wiki.secondlife.com/wiki/LSL_Alternate_Editors">se encuentra en la wiki de Second Life</a>.</p>

<p><em>Como dato adicional para los lectores curiosos. En su momento (para la mayoría de mis trabajos realizados) utilizé Notepad++ con una extensión para resaltar el lenguaje de scripting que encontré en la página arriba mencionada mas unos ajustes adicionales personales. Tiempo después descubrí Sublime Text 2 y me quedé con él hasta el día de hoy debido a la cantidad de cosas maravillosas que se pueden lograr con él (incluso este curso está siendo escrito con él :P)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[¡Hola, Mundo!]]></title>
    <link href="http://lsl.xpktro.com//2013/08/30/hola/"/>
    <updated>2013-08-30T00:50:00-05:00</updated>
    <id>http://lsl.xpktro.com//2013/08/30/hola</id>
    <content type="html"><![CDATA[<p>Mi nombre dentro de Second Life es <a href="https://my.secondlife.com/tiaeld.tolsen">Tiaeld Tolsen</a> (aunque también tengo una vida bastante tangible en los <a href="http://www.xpktro.com">planos de la realidad</a>). Tengo varios años como residente, y algunos otros dedicándome profesionalmente al <em>Scripting</em>, esa (hasta ahora) oscura ciencia con la que se puede manejar de todo con todo tipo de aplicaciones.</p>

<p>Inicialmente, este espacio ha sido concebido para albergar una serie de entregas que, en su conjunto, ¡terminarán siendo <strong>un auténtico curso de LSL2</strong>! aunque es bastante posible que la profundidad/detalle de las entregas no sea el suficiente como para abarcar la inmensidad de las funciones disponibles para los <em>scripters</em> actualmente, mi intención es proveer de una vez por todas, a todos los hispanohablantes interesados, del material necesario para que puedan empezar y desenvolverse en este ineresantísimo mundo.</p>

<p>Los términos y condiciones del curso, serán puestos en otra sección, quedando esta como una simple bienvenida/breve introducción a este humilde sitio. Como siempre, todo comentario y/o sugerencia habrá de ser bien recibido; y si el tiempo y el entusiasmo alcanzan, podré tratar algún otro tema de interés general para todos los curiosos habitantes de la Segunda Vida.</p>
]]></content>
  </entry>
  
</feed>
